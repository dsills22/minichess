package mc;
import java.util.concurrent.*;

/*
--looped: System.out.println(ThreadLocalRandom.current().nextLong(Long.MAX_VALUE));
*/

public class ZobristHash {
	public final static int depth = 7;
	public final static long zobristBlack = 23642067728728140L;
	public final static long zobristWhite = 7420035424053257187L;
	public final static long[] zobristPiece = {
		661279364737328874L,
		3880031161694615413L,
		4349932747009559954L,
		4245545698279795759L,
		8184502994946994678L,
		2709755084558607378L,
		1719415110775675438L,
		469382492190075569L,
		6399425817423070716L,
		8167107564066945745L,
		6520747581070201220L,
		2519909736535310090L,
		3166581911057095954L,
		4574903018791023533L,
		3245650145622961370L,
		5991204015316437790L,
		2629664494607851445L,
		2099402651109098702L,
		2505212711044242758L,
		4459710911088844438L,
		3833174665402126303L,
		1174704635269958853L,
		6716593039722287309L,
		3566824714250070590L,
		1911003649835093469L,
		2871859984428647023L,
		7685012731556519889L,
		1924041876439976393L,
		8701556057381975768L,
		8870535213362881192L,
		598148664854108886L,
		6198309416720733487L,
		3386775046224196973L,
		7846023627247081347L,
		6150427780751956874L,
		425441206524957788L,
		6805834630196872090L,
		929474883319071035L,
		4444119047899928970L,
		8992612174611624758L,
		717423849687039278L,
		2661976032653157829L,
		3442062854121422843L,
		5553533983844967483L,
		3331004268471661282L,
		911428701174690936L,
		5520359861356940591L,
		7129673156952857272L,
		2107752889125359613L,
		6481941864300404198L,
		2638117466340094501L,
		7557899108150323107L,
		4371737157553274207L,
		337764693167037151L,
		4165753362350086419L,
		7169622226531779130L,
		5408644834139185156L,
		3256452030851612039L,
		8785536697866347274L,
		1524262749794333465L,
		174620020385428836L,
		942198402387086363L,
		2904023377869284870L,
		2975153664962395974L,
		5588204012785223370L,
		1366862037533004293L,
		2349739848154818838L,
		8649038154028338029L,
		2730867434028856616L,
		3841767784980023374L,
		4100863041547152880L,
		6993821271960052513L,
		4135407951321678160L,
		7737282943533215671L,
		2059967461613834809L,
		1479680103937541655L,
		4475358335422172381L,
		137000140783222159L,
		4941802192564775734L,
		8492126990997642875L,
		2528361517541647503L,
		2017984474861233616L,
		5203644512589306859L,
		7286082059474982944L,
		6159422880589820795L,
		5571371027437552672L,
		1728457541957107783L,
		5806905361542721658L,
		2900233072342312051L,
		5899791139786160270L,
		420984765305402327L,
		4777044644515410570L,
		3163517905760256303L,
		5589601855286547292L,
		9177790090493035166L,
		1913088022766854934L,
		295711449820795339L,
		4146111959993561948L,
		1626889201433620065L,
		6348010892493872347L,
		717809037385792624L,
		3983621462635494118L,
		9011978420778533829L,
		8235628697785637825L,
		3712840412194917140L,
		3147440088340057274L,
		6906148855541137L,
		8977638489950208186L,
		2903423068970134908L,
		7391271204046602744L,
		2588978722826950237L,
		7751172868975638960L,
		8740380277845528366L,
		505618240222353059L,
		70920205571220427L,
		8702344660532529535L,
		6817672216385157215L,
		6033934724678578151L,
		5256206892691621179L,
		8211909297160426383L,
		5667765357249214002L,
		1225819690527158247L,
		2616898668170643862L,
		1223258476166374704L,
		1159879408690092428L,
		8176637971196881464L,
		8266501464525464507L,
		7736917701619220438L,
		4241990902945900414L,
		8202608697647378115L,
		2933106972435882812L,
		4611824966744728869L,
		1517018890489620672L,
		8473074729555950770L,
		103812459133693180L,
		1599320980424529534L,
		4788814048626711506L,
		7880363990228214486L,
		3515979990638427220L,
		3361431702243857541L,
		7998568902248456666L,
		7431895690924224453L,
		2018089736663691336L,
		820098359974535741L,
		1597558473576095438L,
		6198397818779573544L,
		2462208245105106819L,
		4975533060715375268L,
		8034899777574715093L,
		5644353930240359987L,
		2899225568510682333L,
		5663320712856079343L,
		7854106970570436265L,
		652654149236753345L,
		1948365842506497344L,
		8678528164736964557L,
		8244356742171061501L,
		5030450533632636654L,
		2027824716562112385L,
		7335587346447895020L,
		5647705233527248557L,
		7033118642978166837L,
		5771299064596121312L,
		8518811919438918396L,
		1054755796814432277L,
		2393990976129403647L,
		1705540042015941984L,
		1922762366317192292L,
		7965482413721891064L,
		838150034470891509L,
		2465760032637290242L,
		5772381264549876572L,
		355511123109681667L,
		4848754056093995622L,
		1926946364494563892L,
		3427610496433101939L,
		2662188465070617220L,
		1837088118961619311L,
		2329545324180389170L,
		6335899700011971901L,
		7697249602566182041L,
		1233929583953047223L,
		141900497880387755L,
		7936594313770983206L,
		1167494566503083131L,
		2068119924029646241L,
		4626654386034358277L,
		1397578245815830279L,
		8567627115182260775L,
		219157348570962789L,
		3164436145316701518L,
		7838883026240461434L,
		1155916236235101263L,
		2508278190092910304L,
		4704962239875295141L,
		8468994166626445557L,
		3725694124943006742L,
		8201238610237155450L,
		8876752689387589079L,
		7583969808281752762L,
		779006722752386315L,
		5918279379149610554L,
		6176433255539634064L,
		4334668839146313967L,
		7775843296654662813L,
		5063073080323106887L,
		2188098557208297550L,
		6866894661086865200L,
		6912006939374960993L,
		445109440461428513L,
		1641149254443445818L,
		6405802968510406940L,
		4579152219762587637L,
		7902148761425425909L,
		1111911523483751894L,
		3199860352482868389L,
		1573191897820549622L,
		6598062570062265143L,
		7756272345005198930L,
		5248239741752784137L,
		3181097186872890148L,
		3653327808281028647L,
		7720980434664087412L,
		6843826837472578866L,
		2101219368947197749L,
		8270503728347176626L,
		6303450559650722729L,
		2894535005361928493L,
		931255773980826684L,
		3127434803316815969L,
		6084215857264542268L,
		7163110729566471865L,
		7322298049572384149L,
		4860111937531505966L,
		4599375832538073838L,
		7956194279895858730L,
		8685132307656087562L,
		6136429569098864726L,
		7068610207799003288L,
		3879308508485756314L,
		463431878315733635L,
		464735252003617571L,
		6847254623103221890L,
		3379243918780185343L,
		7862520994438357027L,
		8894023537150391200L,
		199406435564881741L,
		8897502305856548181L,
		3749000990332667748L,
		469672323737236356L,
		1820599532678860132L,
		1562739481445027490L,
		1522093603882980448L,
		3550211232853412929L,
		692162156509965612L,
		2336300973968942615L,
		1892396924579571844L,
		204319258605978823L,
		6792499265453526059L,
		7244416647363746018L,
		6614399858145806287L,
		7418957281203552548L,
		6279569825369295619L,
		5384893661789677777L,
		4969567058271903150L,
		496906000844702167L,
		4847048762795925654L,
		6808411392431026072L,
		1184504807247826502L,
		7652202658306978039L,
		7256045828936174158L,
		7011538784964422582L,
		6246978845082981659L,
		7569966598006509485L,
		6390331425832456790L,
		1413853901968469420L,
		375748219431770344L,
		8710527089462468100L,
		5462002825347310346L,
		4200770617755713714L,
		8428820719279443090L,
		1676278749057052240L,
		5746156309222685640L,
		910739787422987311L,
		3875016141248268452L,
		5667410458849644272L,
		396697719738866984L,
		4360932618848454402L,
		342678067162087509L,
		7190313386516982783L,
		7910550570947702598L,
		8006484290032520029L,
		5294512530888399491L,
		6937824433394571506L,
		7537684060893828564L,
		953509777902058093L,
		4937113041562427631L,
		1061909611467580468L,
		8822984119379757657L,
		3870296262047061703L,
		6856402128625332355L,
		8900943401093137932L,
		2616719404770380648L,
		2581404404879507788L,
		2994771028974819317L,
		3352207130595698703L,
		4039329256481655165L,
		2028787351222485894L,
		5239760355997378995L,
		7848552449261917633L,
		2851229250421129125L,
		13957627644837532L,
		4663462224574251836L,
		2774089779197166375L,
		588694715593239369L,
		6233821466946662770L,
		1379666193239171020L,
		4568386086771184710L,
		5094282832395109236L,
		8517649141287814272L,
		7129176400214916889L,
		5225388844069330465L,
		6731052239843140187L,
		8700903740938752108L,
		450746531195053540L,
		1229348352878320376L,
		1654483337527697209L,
		36129241364832344L,
		3700868302873915219L,
		5668234951255606122L,
		9112542895050395822L,
		8097207508057029135L,
		6423728034745471020L,
		8947050301051267060L,
		5546100667012195010L,
		41861919848233688L,
		4391722682339552829L,
		1277289604275154085L,
		5462261588510618045L,
		3424548041693541427L,
		5673944037702286584L,
		5855537746851492874L,
		6833084151933133850L,
		475999833383086512L,
		8980149414379135172L,
		3096852098292596204L,
		4223589311706314553L,
		8100707478255831748L,
		6804176618154124734L,
		1734858280899580241L,
		2989333307707182808L,
		1926331319627313789L,
		951132630273752703L,
		3786299202965192972L,
		7567717191291071298L,
		1445360098953029572L,
		5466863593444753168L,
		7990130913526989697L,
		4911306156791325050L,
		4412721346335025501L,
		7688761108168725296L,
		1206331726788416070L,
		3002922550257419071L,
		1543452204171176303L,
		931042267543385188L,
		6091957975123622080L,
		997184973778417114L,
		2752168449990324964L,
		1544173346550335481L,
		7282113457810514100L,
		4192315878964896750L,
		3842159072871816284L,
		2035662180349247609L,
		7452613557580959543L,
		4170508412305177082L,
		7865057568844242373L,
		7122500097713873169L,
		6806427443940592506L,
		8481679792534064824L,
		6559936702614960942L,
		3578759807340828410L,
		1792828303869670111L,
		786263317601288564L,
		9165089026510921104L,
		6853792035470556666L,
		2497278443132209794L,
		2087241992645769228L,
		329583370723317632L,
		5425377763442586496L,
		4908380277245888090L,
	};

	public ZobristHash() {
		/*for(byte i = 0; i < State.rowNum; i++) {
			for(byte j = 0; j < State.colNum; j++) {
				for(byte k = 0; k < 7; k++) {
					System.out.println(ThreadLocalRandom.current().nextLong(Long.MAX_VALUE) + "L,");
				}
			}
		}*/
	}

	public static int to1D(int x, int y, int z, int yMax, int xMax) {
    	return (z * xMax * yMax) + (y * xMax) + x;
	}

	public static long boardHash(State state) {
		long hash = 0L;
		if(state.isWhiteOnMove) {
			hash ^= zobristWhite;
		} else {
			hash ^= zobristBlack;
		}

		for(byte i = 0; i < State.rowNum; i++) {
			for(byte j = 0; j < State.colNum; j++) {
				Piece p = state.getPieceAt(i, j);
				if(p == null) {
					hash ^= zobristPiece[to1D(i, j, 0, State.colNum, State.rowNum)];
				} else {
					int zOffset = (p.isWhite ? 6 : 0);
					switch(p.pieceType) {
						case Piece.PAWN: hash ^= zobristPiece[to1D(i, j, 1 + zOffset, State.colNum, State.rowNum)]; break;
						case Piece.BISHOP: hash ^= zobristPiece[to1D(i, j, 2 + zOffset, State.colNum, State.rowNum)]; break;
						case Piece.KNIGHT: hash ^= zobristPiece[to1D(i, j, 3 + zOffset, State.colNum, State.rowNum)]; break;
						case Piece.ROOK: hash ^= zobristPiece[to1D(i, j, 4 + zOffset, State.colNum, State.rowNum)]; break;
						case Piece.QUEEN: hash ^= zobristPiece[to1D(i, j, 5 + zOffset, State.colNum, State.rowNum)]; break;
						case Piece.KING: hash ^= zobristPiece[to1D(i, j, 6 + zOffset, State.colNum, State.rowNum)]; break;
					}
				}
			}
		}

		return hash;
	}

	public static long pieceToHashAt(byte pieceType, boolean isWhite, byte i, byte j) {
		long hash = 0L;
		int zOffset = (isWhite ? 6 : 0);
		switch(pieceType) {
			case Piece.PAWN: hash ^= zobristPiece[to1D(i, j, 1 + zOffset, State.colNum, State.rowNum)]; break;
			case Piece.BISHOP: hash ^= zobristPiece[to1D(i, j, 2 + zOffset, State.colNum, State.rowNum)]; break;
			case Piece.KNIGHT: hash ^= zobristPiece[to1D(i, j, 3 + zOffset, State.colNum, State.rowNum)]; break;
			case Piece.ROOK: hash ^= zobristPiece[to1D(i, j, 4 + zOffset, State.colNum, State.rowNum)]; break;
			case Piece.QUEEN: hash ^= zobristPiece[to1D(i, j, 5 + zOffset, State.colNum, State.rowNum)]; break;
			case Piece.KING: hash ^= zobristPiece[to1D(i, j, 6 + zOffset, State.colNum, State.rowNum)]; break;
			default:         return zobristPiece[to1D(i, j, 0, State.colNum, State.rowNum)];
		}
		return hash;
	}

	//do and undo are symmetrical
	public static long placeMove(Move move, long hash) {
		hash ^= pieceToHashAt(move.piece.pieceType, move.piece.isWhite, move.fromRow, move.fromCol); //remove (or add back for undo) piece from current spot
		hash ^= pieceToHashAt((byte) -999, false, move.fromRow, move.fromCol); //add (remove) empty square
		if(move.isPromotion) {
			hash ^= pieceToHashAt(Piece.QUEEN, move.piece.isWhite, move.toRow, move.toCol); //place piece (or remove for undo) at destination
		} else {
			hash ^= pieceToHashAt(move.piece.pieceType, move.piece.isWhite, move.toRow, move.toCol); //place piece (or remove for undo) at destination
		}

		if(move.capturedPiece != null) {
			hash ^= pieceToHashAt(move.capturedPiece.pieceType, move.capturedPiece.isWhite, move.toRow, move.toCol); //remove captured piece (or add back for undo)
		} else {
			hash ^= pieceToHashAt((byte) -999, false, move.toRow, move.toCol); //remove empty square
		}
		return hash;
	}

	public static void placeMoveOnState(State state, Move move) {
		state.incrementalHash = placeMove(move, state.incrementalHash);
	}
}